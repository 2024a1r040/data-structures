/ Circular Queue
#include<stdio.h>
#include<stdlib.h>
#define size 100
int queue[size] , front =-1, rear =-1;
int isEmpty(){
    return (front == -1) ? 1 : 0;
}
int isFull(){
   return ((rear+1)%size == front) ? 1 : 0;
}
void enqueue(int data){
    rear = (rear+1)%size;
    queue[rear]=data;
    if(front ==-1){
        front =0;
    }
    printf("Element inserted!!\n");
}
int dequeue(){
int data =queue[front];
if(front== rear){
    front=rear-1;
}
else{
    front = (front+1)%size;
}
return data;
}

int peek(){
    return queue[front];
}
void display(){
    printf("Ciecular queue elements are: \n");
    int i=front;
    while(i != rear){
        printf("%d ",queue[i]);
        i=(i+1)%size;
    }
printf("%d",queue[rear]);
}
int main (){
    while(1){
        printf("1.Enqueue\n");
        printf("2.Dequeue\n");
        printf("3.Peek\n");
        printf("4.Display\n");
        printf("5.Exit\n");
        int choice , data ;
        printf("Enter choice : ");
        scanf("%d",&choice);
        switch(choice){
            case 1 :
            if(isFull()) {
                printf("Queue overflow!!\n");
            }
            else {
                printf("Enter Element : ");
                scanf("%d",&data);
                enqueue(data);
            }
            break;
            case 2 :
            if(isEmpty()){
                printf("Queue underflow!!\n");
            }
            else  {
            printf("%d is deleted  from the queue\n",dequeue());
            }
            break;
            case 3 :
            if(isEmpty()){
                printf("Queue underflow!!\n");
            }
            else {
            printf("%d is front element in the queue\n",peek());
            }
            break;
            case 4 : 
            if(isEmpty()){
                printf("Queue underflow!!\n");
            }
            else {
                display();
            }
            break;
            case 5 :
            exit(0);
            break;
            default : 
            printf("Invalid operations !\n");
        }
        printf("\n");
    }
    return 0;
}
